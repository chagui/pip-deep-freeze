#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# :copyright: (c) 2019 Guilhem Charles. All rights reserved.
"""Given a Python requirements file:
    1. Create a temporary virtual environment;
    2. Install the requirements;
    3. Freeze the complete dependency tree.

The dependency tree contains all dependencies pinned to the current version in use. The results is output to a file
in requirements format.
"""

from argparse import ArgumentParser
from os import path
from subprocess import run
from tempfile import TemporaryDirectory
from venv import EnvBuilder


def deep_freeze(requirements: str,
                output: str) -> None:
    """
    Freeze all dependencies and their dependencies from the given requirements file. Use a
    temporary virtual environment.
    """
    with TemporaryDirectory() as venv_dir:
        EnvBuilder(with_pip=True).create(venv_dir)
        pip_cmd = path.join(venv_dir, 'bin', 'pip')
        p = run([pip_cmd, 'install', '-U', 'pip', '-r', requirements])
        if p.returncode == 0:
            with open(output, 'w') as frozen_requirements:
                frozen_requirements.write(f'# generated by {path.basename(__file__)}\n')
                frozen_requirements.flush()
                p = run([pip_cmd, 'freeze'], stdout=frozen_requirements)
                if p.returncode != 0:
                    print(f'error during dependencies freeze: {p.stderr}')
        else:
            print(f'could not install dependencies: {p.stderr}')


def get_argparser() -> ArgumentParser:
    parser = ArgumentParser(description='Freeze the dependency tree of the given Python requirements')
    parser.add_argument('requirements', type=str,
                        help='Path to the file containing the Python requirements (e.g. requirements.txt)')
    parser.add_argument('-o', '--output', default='frozen-requirements.txt', type=str,
                        help='Path to file to output frozen dependencies')
    return parser


def main():
    parsed_args = get_argparser().parse_args()
    deep_freeze(parsed_args.requirements, parsed_args.output)


if __name__ == '__main__':
    main()
